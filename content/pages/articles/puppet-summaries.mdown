Date: 26 July, 2012
Categories: categories/puppet
Summary: What was that command again to test the module? A template to copy for adding a user goes like what again? Ugh, I need a cheatsheet to help me keep all of this recorded! So here you go, the cheatsheet
Updates:
    1:
        date: "27 Mar, 2014"
        desc: "Changed content to show how to get information on various resources."


# Puppet Cheatsheet

I really like puppet and there seems like lots to learn. This article is the home of all the examples and methods for managing changes to puppet.

## Apply a single manifest

    :::shell
    puppet apply my_test_manifest.pp

## Run the entire catalog

    :::shell
    puppet apply --test --debug

## Resources

### Listing information about resource

When trying to find out how to use the file resource, type the following into your puppet master server and you should be able to get the attributes available for use. This is also helpful for finding out what attributes are available for auditing.

command example

    :::shell
    puppet resource file /etc/hosts

output:

    :::ruby
    file { '/etc/hosts':
      ensure  => 'file',
      content => '{md5}ec7cb20e9674ba59d0c366572b311ae5',
      ctime   => '2014-01-10 07:55:33 -0800',
      group   => '0',
      mode    => '644',
      mtime   => '2014-01-10 07:55:33 -0800',
      owner   => '0',
      type    => 'file',
    }

command example:

    :::shell
    puppet describe file | less

## rspec-puppet

When creating modules it is nice to have some test driven development to be leveraged for verifying the catalog is compiled with the expected results. Very useful for when you don't have the ability to run other operating systems but want to test the facts or custom parameters passed to modules/types/providers.

### getting started with rspec-puppet

When starting out with rspec for puppet I had to make sure to use Ruby 1.9.3-p448 (or above would work as well) and then installed the gems:

    :::shell
    rspec (2.14.1)
    rspec-core (2.14.8)
    rspec-expectations (2.14.5)
    rspec-mocks (2.14.6)
    rspec-puppet (1.0.1)

Install command:

    :::shell
    gem install rspec rspec-core rspec-expectations rspec-mocks rspec-puppet

Then goto a module you want to work on and run the following command:

    :::shell
    rspec-puppet-init

you should see a list of files being added. At the time of writing this article I noticed that the spec/spec.opts file was not created. So either remove the offending line in your `Rakefile` or run `touch spec/spec.opts` to stop the error from complaining.

In addition, I like adding the following block of code to your `Rakefile`:

    :::ruby
    desc "Run all RSpec code examples"
    RSpec::Core::RakeTask.new(:rspec) do |t|
      t.rspec_opts = File.read("spec/spec.opts").chomp || ""
      t.rspec_opts = "--format documentation --color" # this line adds nice color and formatting
    end

From here you are all setup to do your testing with the following command:

    :::shell
    rake

or you can use

    :::shell
    rake rspec

and here is my sample output:

    :::shell
    /Users/aaddleman/.rvm/rubies/ruby-1.9.3-p448/bin/ruby -S rspec ./spec/classes/install_spec.rb --format documentation --color

    inittab
      on RedHat 6
        should contain Class[inittab]
        should contain File[/etc/inittab] with ensure => "file", owner => "root", group => "root", mode => "0644", backup => "main" and audit => ["content", "owner", "group", "mode", "type"]
        should contain File[/etc/inittab] with content =~ /su:S:wait:\/sbin\/sulogin/
      on RedHat 5
        should contain Class[inittab]
        should contain File[/etc/inittab] with ensure => "file", owner => "root", group => "root", mode => "0644", backup => "main" and audit => ["content", "owner", "group", "mode", "type"]
        should contain File[/etc/inittab] with content =~ /~~:S:wait:\/sbin\/sulogin/

    Finished in 0.30011 seconds
    6 examples, 0 failures

which will run all files named `*_spec.rb` files.

## Writing tests

Below is a simple description of the directory structure:

    :::shell
    .
    ├── Gemfile
    ├── Rakefile                # for rake and rspec
    ├── files                   
    │   ├── cent5               
    │   └── cent6
    ├── manifests               
    │   └── init.pp
    ├── readme.md
    ├── spec                    # rspec home
    │   ├── classes             # where to define classes
    │   │   └── install_spec.rb # anything with _spec.rb will be used
    │   ├── defines
    │   ├── fixtures
    │   │   ├── manifests
    │   │   │   └── site.pp
    │   │   └── modules
    │   │       └── inittab
    │   │           ├── files -> ../../../../files
    │   │           ├── lib -> ../../../../lib
    │   │           ├── manifests -> ../../../../manifests
    │   │           └── templates -> ../../../../templates
    │   ├── functions
    │   ├── hosts
    │   ├── spec.opts
    │   └── spec_helper.rb
    └── templates
        ├── redhat5.erb
        └── redhat6.erb

### Example test

Below is my example test for two different operating systems releases of RedHat, version 5 and version 6, by using the `let(:facts)` which simulates the facts variables being used on different operating systems.

    :::ruby
    require 'spec_helper'

    describe 'inittab' do
      context 'on RedHat 6' do
        let(:facts) { 
          { :osfamily => 'RedHat',
            :operatingsystemmajrelease => '6',
          }
        }

        it { should contain_class('inittab') }

        it do should contain_file('/etc/inittab').with(
          'ensure'  => 'file',
          'owner'   => 'root',
          'group'   => 'root',
          'mode'    => '0644',
          'backup'  => 'main',
          'audit'   => [ 'content', 'owner', 'group', 'mode', 'type' ],
        ) end

        it do 
          should contain_file('/etc/inittab').with_content(/su:S:wait:\/sbin\/sulogin/)
        end
      end

      context 'on RedHat 5' do
        let(:facts) { 
          { :osfamily => 'RedHat',
            :operatingsystemmajrelease => '5',
          }
        }

        it { should contain_class('inittab') }

        it do should contain_file('/etc/inittab').with(
          'ensure'  => 'file',
          'owner'   => 'root',
          'group'   => 'root',
          'mode'    => '0644',
          'backup'  => 'main',
          'audit'   => [ 'content', 'owner', 'group', 'mode', 'type' ],
        ) end

        it do 
          should contain_file('/etc/inittab').with_content(/~~:S:wait:\/sbin\/sulogin/)
        end
      end
    end

For an example on how to test parameters, here is a test showing how that is accomplished:

    :::ruby
    require 'spec_helper'

    describe 'ntpint' do
      context 'on RedHat 6' do
        let(:facts) { 
          { :osfamily => 'RedHat',
            :operatingsystemmajrelease => '6',
          }
        }

        let(:params) {
          { :package_install => true,
            :ntp_servers => ['your.time.server.com'],
          }
        }

        it { should contain_class('ntpint') }

        it { should compile }

        it do
          should contain_package('ntp')
        end

        it do
          should contain_file('/etc/ntp.conf')
        end

        it do
          should contain_file('/etc/ntp.conf').with_content(/server your.time.server.com/)
        end
      end
    end